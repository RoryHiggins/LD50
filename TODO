Lua TODO
--------------
tag.Entity extends entity.Entity
	tags: schema.Mapping(schema.String, schema.Boolean)
tag.WorldSys : world.Sys
	is_set(entity.Entity, ...tags: [str]) : bool
	set(entity.Entity, ...tags: [str])  # invokes on_entity_tag_set
	add(entity.Entity, ...tags: [str])
	remove(entity.Entity, ...tags: [str])
	_entity_world: entity.WorldSys

bounds.Entity extends entity.Entity
	x, y, width, height: num
bounds.WorldSys
	find_in(x, y, width, height: num, entity.Entity, ...tags: [str]) : entity.Entity|nil
	find_all_in(x, y, width, height: num, entity.Entity, ...tags: [str]) : [entity.Entity]
	get(entity.Entity) : num, num, num, num
	set(entity.Entity, x, y: num, width, height: num|nil)
	move(entity.Entity, offset_x, offset_y: num)
	_entity_world: entity.WorldSys

sprite.Sprite : schema.SerializableObject
	file_name: str
	file_type = "png"
	u1, v1, u2, v2: num
sprite.Entity extends bounds.Entity
	sprite_name: str
	r, g, b, a, z, scale_x, scale_y, translate_x, translate_y, rotate: num?
sprite.AtlasRegion
	atlas_region_id: num
	u1, v1, u2, v2: num
sprite.WorldSys : world.Sys
	add_sprite(sprite.Sprite)
	find_sprite(sprite_name: str) : sprite.Sprite
	draw_sprite(client.wrappers.VertexArray, sprite.Component)
	set(entity.Entity, sprite.Component)
	set_name(entity.Entity, sprite_name: str)
	remove(entity.Entity)
	on_draw()  # draw the sprites of entites
	state
		spritesheets: {[str]: sprite.Spritesheet}
sprite.GameSys : game.Sys
	load_png(file_name: str)
	unload(file_name: str)
	_sprite_cache: {[str]: sprite.Allocation}
	_atlas_region_by_filename: {[str]: sprite.AtlasRegion}

animation.Animation : schema.SerializableObject
	frames: [str]  # sprite names
animation.Component : schema.SerializableObject
	anim_name: str
	anim_frame_id: num
	anim_is_looping: bool
animation.WorldSys : world.Sys
	add_animation(anim_name: str, animation.Animation)
	find_animation(anim_name: str) : animation.Animation|nil
	set(entity.Entity, animation.Component)
	set_name(entity.Entity, anim_name: str)
	set_frame_id(entity.Entity, frame_id: num)
	get_ended(entity.Entity) : bool  # frame_id == #frames
	remove(entity.Entity)
	on_step()  # progress the animation of entities
	_animation_game: animation.GameSys : game.Sys
	_sprite_game: sprite.GameSys : game.Sys

text.Font : schema.SerializableObject
	filename: str
	type = "ascii"  # only currently supported type
text.Component : schema.SerializableObject
	font_name: str
	r, g, b, a, z, translate_x, translate_y, max_width, max_height: num?
text.WorldSys : world.Sys
	add_font(font_name: str, text.Font)
	find_font(font_name: str) : text.Font|nil
	draw_text(client.wrappers.VertexArray, text.Component)
	set(entity.Entity, text.Component)
	set_text(entity.Entity, text: str)
	remove(entity.Entity)
	on_draw()  # draw entity text components
	state
		fonts: 
	_game_text: text.GameSys
text.GameSys : game.Sys
	load(text.Font)
	unload(text.Font)
	_ascii_font_by_filename: {[str]: client.wrappers.AsciiFont}
	_texture_atlas: client.wrappers.TextureAtlas

primitive.WorldSys
	draw_triangle(x1, y1, x2, y2, x3, y3: num, r, g, b, a, z: num|nil)
	draw_rect(x1, y1, x2, y2: num, r, g, b, a, z: num|nil)
	draw_rect_outline(x1, y1, x2, y2: num, r, g, b, a, z: num|nil)
	draw_line(x1, y1, x2, y2: num, r, g, b, a, z: num|nil)
	draw_point(x1, y1: num, r, g, b, a, z: num|nil)

audio.Audio : schema.SerializableObject
	filename: str
	volume: num  # 0..1
audio.PlaybackId : schema.Number
audio.Playback : schema.SerializableObject
	audio_name: str
	loop_count, cutoff_time, fadein_time, volume : num
	loop_forever : bool
audio.WorldSys : world.Sys
	add(audio_name: str, audio.Audio)
	find(audio_name: str) : audio.Audio|nil
	play(audio.Playback) : audio.PlaybackId
	stop(audio.PlaybackId)
	stop_all()
	_game_audio: audio.GameSys
audio.GameSys : game.Sys
	load(audio.Audio)
	unload(audio.Audio)
	_audio_by_filename: {[str]: client.wrappers.Audio}

music.WorldSys
	play(audio_name: str)
	stop()
	get_name() : str|nil
	state
		audio_name: str

camera_target.Component : schema.SerializableObject
	camera_name: str
	speed: num?
	margin: num?
camera_target.WorldSys : world.Sys
	set(entity.Entity, camera_target.Component)
	remove(entity.Entity)
	on_step()
	on_entity_destroy()  # remove if named view removed


better history:
	- sim:broadcast() -> sim:_broadcast(), does not add to history
	- add sys:broadcast() which calls sim:_broadcast()
	- sim:send() for external users; adds to history
	- history RLE compression: history defined in terms of (repeats, name, ...)


Client TODOs
============
Small important TODOs
	Allocate 1x1 white pixel at topleft of texture atlas

Big TODOs
	Unicode font loading, unicode text rendering
	adjustable 2D positions for positional audio playback?
	streaming audio playback from formats other than wav...?

Refactoring TODOs
	lua bindings: add get_raw_texture() and get_raw_render_texture() to bindings, remove type branching logic in texture init
	rename "target" to "dest" in bindings

