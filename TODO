
Rendering - plan
----------------
- OpenGL 2.1
- macro to use backend for opengl 2.1 with opengl 3.2 in compat mode (for Renderdoc to work)
- load fbo extension for 2.1


Textures needed: window texture (final dest), texture atlas (source/intermediate)

Texture drawing steps:
- prepare game texture for rendering - set fbo, clear texture to black
- render game texture - uses texture atlas, game vertices, viewport
- prepare window texture for rendering - set fbo, clear texture to black
- render game to window texture - uses game texture
	- upscaled w/ nearest neighbor, integer scaling, placed at window center
- render gui to window gui texture - uses texture atlas
	- texture-sized black quad at the start to clear the window texture
	

Rendering - high-level design
-----------------------------
odRenderVertex
- sort_array()

odRenderTexture

odRenderPipeline
- render_context  // void* AKA SDL_GlContext
- vao
- fbo
- program
- vert_shader
- frag_shader

odRenderPipeline2D
- render_pipeline
- render(*vertices, *dest_texture, *src_texture, viewport)
- copy_texture(*dest_texture, *src_texture, viewport)

odTextureAtlas
- texture
- allocate(w, h, *out_u, *out_v)
- assign(*image, u, v, w, h)


Rendering - roadmap
-------------------
- MVP gl render pipeline - color only
	- enable calls for every render call, with glPushAttrib(GL_ENABLE_BIT)
- Texture creation and loading
- Render pipeline texture sampling
- Vertex array representation
- Vertex rendering
- Point to triangles converter
- Line to triangles converter
- Rect to triangles converter
- Primitive to triangles converter
- Triangle depth sorting
