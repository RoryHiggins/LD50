text.WorldSys : world.Sys
	set(entity.Entity, text.Entity)
	set_text(entity.Entity, text: str)
	remove(entity.Entity)
	on_draw()  # draw entity text components
	state
		fonts: {[str]: text.Font}
	_image_world: Image.WorldSys
	_ascii_fonts: {[str]: client.wrappers.AsciiFont}

animation.Animation : schema.SerializableObject
	frames: [str]  # image names
animation.Entity : schema.SerializableObject
	anim_name: str
	anim_frame_id: num
	anim_is_looping: bool
animation.WorldSys : world.Sys
	add_animation(anim_name: str, animation.Animation)
	find_animation(anim_name: str) : animation.Animation|nil
	set(entity.Entity, animation.Entity)
	set_name(entity.Entity, anim_name: str)
	set_frame_id(entity.Entity, frame_id: num)
	get_ended(entity.Entity) : bool  # frame_id == #frames
	remove(entity.Entity)
	on_step()  # progress the animation of entities
	_animation_game: animation.GameSys : game.Sys
	_image_game: image.GameSys : game.Sys

primitive.WorldSys
	draw_triangle(x1, y1, x2, y2, x3, y3: num, r, g, b, a, z: num|nil)
	draw_rect(x1, y1, x2, y2: num, r, g, b, a, z: num|nil)
	draw_rect_outline(x1, y1, x2, y2: num, r, g, b, a, z: num|nil)
	draw_line(x1, y1, x2, y2: num, r, g, b, a, z: num|nil)
	draw_point(x1, y1: num, r, g, b, a, z: num|nil)

audio.Audio : schema.SerializableObject
	filename: str
	volume: num  # 0..1
audio.PlaybackId : schema.Number
audio.Playback : schema.SerializableObject
	audio_name: str
	loop_count, cutoff_time, fadein_time, volume : num
	loop_forever : bool
audio.WorldSys : world.Sys
	add(audio_name: str, audio.Audio)
	find(audio_name: str) : audio.Audio|nil
	play(audio.Playback) : audio.PlaybackId
	stop(audio.PlaybackId)
	stop_all()
	_game_audio: audio.GameSys
audio.GameSys : game.Sys
	load(audio.Audio)
	unload(audio.Audio)
	_audio_by_filename: {[str]: client.wrappers.Audio}

music.WorldSys
	play(audio_name: str)
	stop()
	get_name() : str|nil
	state
		audio_name: str

camera_target.Entity : schema.SerializableObject
	camera_name: str
	camera_speed: num?
	camera_margin: num?
camera_target.WorldSys : world.Sys
	set(entity.Entity, camera_target.Entity)
	remove(entity.Entity)
	on_step()
	on_entity_destroy()  # remove if named view removed


better history:
	- sim:broadcast() -> sim:_broadcast(), does not add to history
	- add sys:broadcast() which calls sim:_broadcast()
	- sim:send() for external users; adds to history
	- history RLE compression: history defined in terms of (repeats, name, ...)


Client TODOs
============
Small important TODOs
	Allocate 1x1 white pixel at topleft of texture atlas

Big TODOs
	Unicode font loading, unicode text rendering
	adjustable 2D positions for positional audio playback?
	streaming audio playback from formats other than wav...?

Refactoring TODOs
	lua bindings: add get_raw_texture() and get_raw_render_texture() to bindings, remove type branching logic in texture init
	rename "target" to "dest" in bindings

