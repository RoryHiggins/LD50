

Lua - Approach
--------------
Serializable: str|num|bool|nil|[Serializable]|{[str]: Serializable}  # conceptual, not a concrete type

Sim
- new(state: Serializable) : Sim
- require(sys_metatable: Metatable[Sym.Sys]) : Sys
- find_by_name(sys_name: str) : Sys|nil
- send(event: str, ...args: [Serializable])
- state: Serializable
- _systems: {[str]: Sys}
- _systems_ordered: [Sys]
- _systems_by_event: {[str]: [Sys]}
Sim.Sys
- new_metatable(name: str) : Metatable[Sym.Sys]
- on_init(sim: Sim, state: Serializable)?
- on_step()?
- on_draw(dest: VertexArray)?
- name: str

Game : Sim
Game.Sys : Metatable[Sim.Sys]

World : Sim
- send_to_game(event: str, ...args: [Serializable])
World.Sys : Metatable[Sim.Sys]
World.Game : World.Sys
- world: World

RenderTarget
- render_texture: odClient.RenderTexture
- vertex_array: odClient.VertexArray
- render_states: odClient.RenderState
- render_texture_to_window_render_states: odClient.RenderState
- point, line, rect_outline, rect, sprite, triangle, vertices
Client
- window: Window
- texture_atlas: odClient.TextureAtlas
- renderer: odClient.Renderer
- render_target: RenderTarget
- gui_render_target: RenderTarget
Client.Game : Sys
- Client
- on_step()  # invokes on_draw(dest: VertexArray), on_draw_gui(dest: VertexArray)

Sprite
- name: str
- x, y, w, h: num
Sprite.Set
- new_from_png(filename: str, sprites_relative: [Sprite]) : Spritesheet
- filename: str
- sprites: [Sprite]
Sprite.Game
- new(texture_atlas: odClient.TextureAtlas)
- add_sprite_set(Sprite.Set)
- find(sprite_name: str) : Sprite|nil
- _texture_atlas: odClient.TextureAtlas  #  depends on Client.Game to get this
- _sprites: {[str]: Sprite}

Entity : Serializable
- tags: [str]|nil
- name: str|nil
- x, y, w, h: num|nil
- sprite: table|nil
	- name: str
	- r, g, b, a, depth, rotation, scale_x, scale_y, translation_x, translation_y: num
Entity.World : World.Sys
- add(src: Serializable|nil) : Entity
- set(entity: Entity, src: Serializable|nil)
- update(entity: Entity, src: Serializable)
- destroy(entity: Entity)
- iterate() : [Entity]
- id_get(entity: Entity) : num
- id_find(id: num) : Entity
- name_find(name: str) : Entity|nil
- name_set(entity: Entity, name: str|nil) : str  # invokes on_entity_name_set
- tag_is_set(entity: Entity, ...tags: [str]) : bool
- tag_set(entity: Entity, ...tags: [str])  # invokes on_entity_tag_set
- tag_add(entity: Entity, ...tags: [str])
- tag_iterate(tag: str) : [Entity]
- bounds_find(x, y, w, h: num, exclude_entity: Entity, ...tags: [str]) : Entity|nil
- bounds_find_all(x, y, w, h: num, exclude_entity: Entity, ...tags: [str]) : [Entity]
- bounds_set(entity: Entity, x, y, w, h: num)  # invokes on_entity_bounds_set
- pos_set(entity: Entity, x, y: num)
- pos_move(entity: Entity, offset_x, offset_y: num)
- _tag_id_to_tag: [str]
- _tag_to_tag_id: {[str]: num}
- _entity_id_to_entity: [Entity]  -- reference to state.entities
- _entity_to_entity_id: {[Entity]: num}
- _entity_name_to_entity: {[str]: Entity}
- _tag_to_entities: {[str]: [Entity]}
- _entity_id_lookup_for_tag_to_entities: [{[str]: num}]  -- for efficient cleanup of _tag_to_entities
- _entity_index: odClient.EntityIndex


Client TODOs
------------
Major TODOs
- Text support
- Audio loading
- Audio mixing

Long-term major TODOs
- Unicode font loading, unicode text rendering

Refactoring TODOs
-----------------
lua bindings: add get_raw_texture() and get_raw_render_texture() to bindings, remove type branching logic in texture init
