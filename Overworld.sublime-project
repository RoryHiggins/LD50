{
	"build_systems":
	[
		{
			"name": "Debug generate and rebuild",
			"shell_cmd": "rm -rf .\\build\\DEBUG_ANY && make TARGET=DEBUG",
			"working_dir": "$project_path",
		},
		{
			"name": "Debug build iteratively and run fast tests",
			"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --test --no-slow-test --no-client",
			"working_dir": "$project_path",
		},
		{
			"name": "Debug build iteratively and run fast tests + client",
			"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --test --no-slow-test",
			"working_dir": "$project_path",
		},
		{
			"name": "Debug build iteratively and run tests + client",
			"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --test",
			"working_dir": "$project_path",
		},
		{
			"name": "Debug run tests + client with gdb",
			"shell_cmd": "start make gdb CLIENT_ARGS='--test --debug'",
			"working_dir": "$project_path",
		},
		{
			"name": "Emscripten debug generate and rebuild",
			"shell_cmd": "rm -rf .\\build\\DEBUG_EMSCRIPTEN_ANY && emcmake cmake -S . -B .\\build\\DEBUG_EMSCRIPTEN_ANY -D CMAKE_BUILD_TYPE=DEBUG && cmake --build .\\build\\DEBUG_EMSCRIPTEN_ANY",
			"working_dir": "$project_path",
		},
		{
			"name": "Emscripten debug iterative build",
			"shell_cmd": "cmake --build .\\build\\DEBUG_EMSCRIPTEN_ANY",
			"working_dir": "$project_path",
		},
		{
			"name": "Emscripten debug iterative build and host",
			"shell_cmd": "cmake --build .\\build\\DEBUG_EMSCRIPTEN_ANY && python3 -m http.server -d .\\build\\DEBUG_EMSCRIPTEN_ANY",
			"working_dir": "$project_path",
		},
		// {
		// 	"name": "Run client",
		// 	"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "Debug run tests with gdb",
		// 	"shell_cmd": "start make test_gdb",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "Debug generate and rebuild with clang-tidy",
		// 	"shell_cmd": "rm -rf .\\build\\DEBUG_ANY && cmake -S . -B .\\build\\DEBUG_ANY -G\"Ninja\" -DCMAKE_CXX_CLANG_TIDY=clang-tidy -D CMAKE_BUILD_TYPE=DEBUG && cmake --build .\\build\\DEBUG",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "Release generate and rebuild",
		// 	"shell_cmd": "rm -rf .\\build\\RELEASE && make TARGET=RELEASE",
		// 	"working_dir": "$project_path",
		// },
		// renamed find to gnu-find locally for windows, due to clash with win32 find
		// {
		// 	"name": "Clang format",
		// 	"shell_cmd": "make format",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "Clang tidy",
		// 	"shell_cmd": "make tidy",
		// 	"working_dir": "$project_path",
		// },
	],
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns":
			[
				"build",
				"tmp",
				".vscode",
			]
		},
		{
			"path": "C:\\msys64\\mingw64\\lib\\gcc\\x86_64-w64-mingw32\\10.3.0\\include",
			"file_exclude_patterns":
			[
				"*intrin.h"
			]
		},
		{
			"path": "C:\\msys64\\mingw64\\include\\SDL2"
		},
		{
			"path": "C:\\msys64\\mingw64\\include\\GL"
		},
		{
			"path": "C:\\msys64\\mingw64\\include",
			"file_include_patterns":
			[
				"png.h",
			],
			"folder_include_patterns":
			[
				"<none>"  // prevents any non-explicitly stated folders from being included
			]
		},
		// {
		// 	"path": "C:\\msys64\\mingw64\\include\\c++",
		// 	"folder_exclude_patterns":
		// 	[
		// 		"tr1",
		// 		"tr2",
		// 		"experimental",
		// 		"backward",
		// 	],
		// },
	],
}
