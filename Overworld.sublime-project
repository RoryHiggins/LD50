{
	"build_systems":
	[
		{
			"name": "Run headless",
			"cmd": "luajit $file",
			"working_dir": "$project_path",
		},
		{
			"name": "Luacheck",
			"cmd": "luacheck.bat engine examples",
			"working_dir": "$project_path",
		},

		// {
		// 	"name": "Run headless in separate window",
		// 	"shell_cmd": "start luajit $file",
		// 	// "cmd": "echo $project_path",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "DEBUG run lua client",
		// 	"cmd": ".\\build\\DEBUG_ANY\\od_client.exe --lua-client examples/minimal/main.lua",
		// 	"working_dir": "$project_path",
		// },

		// {
		// 	"name": "DEBUG generate and rebuild shared",
		// 	"shell_cmd": "rm -rf .\\build\\DEBUG_ANY && make TARGET=DEBUG CLIENT_CMAKE_ARGS='-D BUILD_SHARED_LIBS=1'",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "DEBUG generate and rebuild static",
		// 	"shell_cmd": "rm -rf .\\build\\DEBUG_ANY && make TARGET=DEBUG",
		// 	"working_dir": "$project_path",
		// },
		{
			"name": "DEBUG build iteratively and run fast tests",
			"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --no-client --test --no-slow-test",
			"working_dir": "$project_path",
		},
		{
			"name": "DEBUG build iteratively and run tests by name",
			"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --no-client --test --test-name-filter odTest_odLuaBindings",
			"working_dir": "$project_path",
		},
		{
			"name": "DEBUG run tests + lua client with gdb",
			"shell_cmd": "start make gdb TARGET=DEBUG CLIENT_ARGS=''",
			"working_dir": "$project_path",
		},
		{
			"name": "DEBUG build iteratively and run fast tests + lua client",
			"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --test --no-slow-test --lua-client examples/minimal/main.lua",
			"working_dir": "$project_path",
		},
		{
			"name": "DEBUG build iteratively and run tests + lua client",
			"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --test --lua-client examples/minimal/main.lua",
			"working_dir": "$project_path",
		},
		// {
		// 	"name": "DEBUG build iteratively and run fast tests + client",
		// 	"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --test --no-slow-test",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "DEBUG build iteratively and run tests + client",
		// 	"shell_cmd": "ninja -C .\\build\\DEBUG_ANY od_client.exe && .\\build\\DEBUG_ANY\\od_client.exe --test",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "DEBUG create coverage report",
		// 	"shell_cmd": "make coverage TARGET=DEBUG",
		// 	"working_dir": "$project_path",
		// },


		// {
		// 	"name": "PROFILE generate and rebuild",
		// 	"shell_cmd": "rm -rf .\\build\\RELEASE_PROFILE_WIN && make TARGET=RELEASE KEY=PROFILE_WIN CLIENT_CMAKE_ARGS='-D OD_BUILD_PROFILE=1 -D OD_BUILD_TESTS=1'",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "PROFILE build iteratively and run tests by name",
		// 	"shell_cmd": "ninja -C .\\build\\RELEASE_PROFILE_WIN od_client.exe && .\\build\\RELEASE_PROFILE_WIN\\od_client.exe --no-client --test --test-name-filter odTest_odEntityIndex_search_performance",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "PROFILE create report",
		// 	"shell_cmd": "make profile TARGET=RELEASE KEY=PROFILE_WIN CLIENT_CMAKE_ARGS='-D OD_BUILD_PROFILE=1 -D OD_BUILD_TESTS=1'",
		// 	"working_dir": "$project_path",
		// },


		// {
		// 	"name": "RELEASE generate and rebuild",
		// 	"shell_cmd": "rm -rf .\\build\\RELEASE_ANY && make TARGET=RELEASE",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "RELEASE build iteratively and run client",
		// 	"shell_cmd": "ninja -C .\\build\\RELEASE_ANY od_client.exe && .\\build\\RELEASE_ANY\\od_client.exe",
		// 	"working_dir": "$project_path",
		// },

		// {
		// 	"name": "Emscripten debug generate and rebuild",
		// 	"shell_cmd": "rm -rf .\\build\\DEBUG_EMSCRIPTEN_ANY && emcmake cmake -S .\\client -B .\\build\\DEBUG_EMSCRIPTEN_ANY -D CMAKE_BUILD_TYPE=DEBUG && cmake --build .\\build\\DEBUG_EMSCRIPTEN_ANY",
		// 	"working_dir": "$project_path",
		// },
		{
			"name": "Emscripten debug iterative build",
			"shell_cmd": "cmake --build .\\build\\DEBUG_EMSCRIPTEN_ANY",
			"working_dir": "$project_path",
		},
		// {
		// 	"name": "Emscripten debug iterative build and host",
		// 	"shell_cmd": "cmake --build .\\build\\DEBUG_EMSCRIPTEN_ANY && python3 -m http.server -d .\\build\\DEBUG_EMSCRIPTEN_ANY",
		// 	"working_dir": "$project_path",
		// },

		// {
		// 	"name": "Clang format",
		// 	"shell_cmd": "make format",
		// 	"working_dir": "$project_path",
		// },
		// {
		// 	"name": "Clang tidy",
		// 	"shell_cmd": "make tidy",
		// 	"working_dir": "$project_path",
		// },
	],
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns":
			[
				"build",
				"tmp",
				".vscode",
			]
		},
		{
			"path": "C:\\msys64\\mingw64\\lib\\gcc\\x86_64-w64-mingw32\\10.3.0\\include",
			"file_exclude_patterns":
			[
				"*intrin.h"
			]
		},
		{
			"path": "C:\\msys64\\mingw64\\include\\SDL2"
		},
		{
			"path": "C:\\msys64\\mingw64\\include\\GL"
		},
		{
			"path": "C:\\msys64\\mingw64\\include",
			"file_include_patterns":
			[
				"png.h",
			],
			"folder_include_patterns":
			[
				"<none>"  // prevents any non-explicitly stated folders from being included
			]
		},
		{
			"path": "C:\\msys64\\mingw64\\include\\c++",
			"folder_exclude_patterns":
			[
				"tr1",
				"tr2",
				"experimental",
				"backward",
			],
		},
		{
			"path": "C:\\msys64\\mingw64\\include\\luajit-2.1"
		},
	],
}
